#!/usr/bin/python

from contextlib import contextmanager
import multiprocessing
import platform
import os
import subprocess
import sys
import urllib


################################################################################
#
# Shared configuration
#
################################################################################


def join_flags(*flags):
    return ' '.join(flags).strip()


cc = '/usr/bin/clang'
cxx = '/usr/bin/clang++'
xcodebuild = '/usr/bin/xcodebuild'
use_libcxx = False

# libc++ is available on OS X 10.7 or later
macosx_version_min = ('10.7' if use_libcxx else '10.6')

python_version = '2.6'
python = '/usr/bin/python' + python_version

num_cores = str(multiprocessing.cpu_count())

link_flags = ('-arch x86_64 -arch i386 -mmacosx-version-min=' +
              macosx_version_min)
compile_flags = join_flags('-g -Os -fexceptions', link_flags)
cflags = join_flags('-std=c99', compile_flags)
cxxflags = join_flags('-std=c++98',
                      compile_flags,
                      '-stdlib=lib%sc++' % ('' if use_libcxx else 'std'))

downloaddir = 'download'
path_to_downloaddir = '../' + downloaddir
patchdir = 'patches'
path_to_patchdir = '../../' + patchdir
builddir = 'source'
stagedir = 'stage'
path_to_stagedir = os.path.abspath(stagedir)
installdir = '/Library/Application Support/MWorks/Developer'


################################################################################
#
# Build helpers
#
################################################################################


all_builders = []


def builder(func):
    all_builders.append(func)
    return func


def announce(msg, *args):
    sys.stderr.write((msg + '\n') % args)


def check_call(args, **kwargs):
    announce('Running command: %s', ' '.join(repr(a) for a in args))
    subprocess.check_call(args, **kwargs)


@contextmanager
def workdir(path):
    old_path = os.getcwd()
    announce('Entering directory %r', path)
    os.chdir(path)
    yield
    announce('Leaving directory %r', path)
    os.chdir(old_path)


def download_file(url, filename):
    filepath = path_to_downloaddir + '/' + filename
    if os.path.isfile(filepath):
        announce('Already downloaded file %r', filename)
    else:
        check_call(['/usr/bin/curl', '-#', '-L', '-f', '-o', filepath, url])


def download_archive(url_path, filename):
    download_file(url_path + filename, filename)


def download_archive_from_sf(path, version, filename):
    url = (('http://downloads.sourceforge.net/project/%s/%s/%s'
            '?use_mirror=autoselect') % (path, version, filename))
    return download_file(url, filename)


def remove_directory(path):
    if os.path.isdir(path):
        check_call(['/bin/rm', '-Rf', path])


def unpack_tarfile(filename, outputdir):
    remove_directory(outputdir)
    check_call(['/usr/bin/tar', 'xf', path_to_downloaddir + '/' + filename])


def unpack_zipfile(filename, outputdir):
    remove_directory(outputdir)
    check_call([
        '/usr/bin/unzip',
        '-q',
        path_to_downloaddir + '/' + filename,
        '-d', outputdir,
        ])


def apply_patch(patchfile):
    with open(path_to_patchdir + '/' + patchfile) as fp:
        check_call(
            args = ['/usr/bin/patch', '-p1'],
            stdin = fp,
            )


def run_configure_and_make(
    srcdir,
    extra_args = [],
    command = ['./configure'],
    extra_cflags = '',
    extra_cxxflags = '',
    extra_ldflags = '',
    patchfile = None,
    post_patch_command = None,
    ):

    env = os.environ.copy()
    env.update({
        'CC': cc,
        'CXX': cxx,
        'CFLAGS': join_flags(cflags, extra_cflags),
        'CXXFLAGS': join_flags(cxxflags, extra_cflags, extra_cxxflags),
        'LDFLAGS': join_flags(link_flags, extra_ldflags),
        })

    with workdir(srcdir):
        if patchfile:
            apply_patch(patchfile)
            if post_patch_command:
                check_call(post_patch_command)
        
        check_call(
            args = command + [
                '--prefix=' + path_to_stagedir,
                '--disable-dependency-tracking',
                '--disable-shared',
                '--enable-static',
                ] + extra_args,
            env = env,
            )
        
        check_call(['/usr/bin/make', '-j', num_cores, 'install'])


################################################################################
#
# Library builders
#
################################################################################


@builder
def boost():
    version = '1.51.0'
    srcdir = 'boost_' + version.replace('.', '_')
    tarfile = srcdir + '.tar.bz2'

    download_archive_from_sf('boost/boost', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    with workdir(srcdir):
        apply_patch('boost_clang_visibility.patch')
        
        check_call([
            './bootstrap.sh',
            '--with-toolset=clang',
            ('--with-libraries='
             'filesystem,python,regex,serialization,system,test,thread'),
            '--without-icu',
            '--with-python=' + python,
            '--prefix=' + path_to_stagedir,
            ])
        
        check_call([
            './b2',
            '-j', num_cores,
            'optimization=space',
            'debug-symbols=on',
            'inlining=on',
            'runtime-debugging=off',
            'link=static',
            'threading=multi',
            'cflags=' + cflags,
            'cxxflags=' + cxxflags,
            'linkflags=' + link_flags,
            'install',
            ])


@builder
def libpng():
    version = '1.2.50'
    srcdir = 'libpng-' + version
    tarfile = srcdir + '.tar.bz2'

    download_archive_from_sf('libpng/libpng12', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(srcdir)


@builder
def jpeg():
    version = '8d'
    srcdir = 'jpeg-' + version
    tarfile = 'jpegsrc.v%s.tar.gz' % version

    download_archive('http://www.ijg.org/files/', tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(srcdir)


@builder
def lcms():
    version = '1.19'
    srcdir = 'lcms-' + version
    tarfile = srcdir + '.tar.gz'

    download_archive_from_sf('lcms/lcms', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(srcdir)


#@builder
def libmng():
    version = '1.0.10'
    srcdir = 'libmng-' + version
    tarfile = srcdir + '.tar.bz2'
    patchfile = srcdir + '_autogen.patch'

    download_archive_from_sf('libmng/libmng-devel', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(
        srcdir = srcdir,
        patchfile = patchfile,
        post_patch_command = ['/bin/chmod', '+x', 'configure', 'install-sh'],
        extra_args = [
            '--with-jpeg=' + path_to_stagedir,
            '--with-lcms=' + path_to_stagedir,
            ],
        )


@builder
def tiff():
    version = '3.9.6'
    srcdir = 'tiff-' + version
    tarfile = srcdir + '.tar.gz'

    download_archive('http://download.osgeo.org/libtiff/', tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(
        srcdir = srcdir,
        extra_args = ['--disable-cxx', '--with-apple-opengl-framework'],
        )


@builder
def devil():
    version = '1.7.8'
    srcdir = 'devil-' + version
    tarfile = 'DevIL-%s.tar.gz' % version

    download_archive_from_sf('openil/DevIL', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(
        srcdir = srcdir,
        extra_args = ['--enable-ILU', '--enable-ILUT', '--disable-exr',
                      '--disable-mng', '--disable-utx', '--without-squish',
                      '--without-nvtt'],
        extra_cflags = ('-std=gnu89 -I/usr/include/malloc -I%s/include' %
                        path_to_stagedir),
        extra_cxxflags = '-std=gnu++98',
        extra_ldflags = ('-lstdc++ -L%s/lib' % path_to_stagedir),
        )


@builder
def cppunit():
    version = '1.12.1'
    srcdir = 'cppunit-' + version
    tarfile = srcdir + '.tar.gz'

    download_archive_from_sf('cppunit/cppunit', version, tarfile)
    unpack_tarfile(tarfile, srcdir)

    run_configure_and_make(srcdir, extra_cflags='-g0')


@builder
def narrative():
    version = '0.1.2'
    srcdir = 'Narrative-' + version
    zipfile = srcdir + '.zip'

    download_archive_from_sf('narrative/narrative',
                             urllib.quote(srcdir.replace('-', ' ')),
                             zipfile)
    unpack_zipfile(zipfile, srcdir)

    with workdir('/'.join([srcdir, srcdir, 'Narrative'])):
        check_call([
            xcodebuild,
            '-project', 'Narrative.xcodeproj',
            '-configuration', 'Release',
            '-xcconfig', installdir + '/Xcode/Development.xcconfig',
            'INSTALL_PATH=@loader_path/../Frameworks',
            'SDKROOT=macosx',
            'SDKROOT_i386=$(SDKROOT)',
            ])

        check_call([
            '/usr/bin/rsync',
            '-a',
            'build/Release/Narrative.framework',
            path_to_stagedir + '/Frameworks',
            ])


################################################################################
#
# Main function
#
################################################################################


def main():
    requested_builders = sys.argv[1:]
    builder_names = set(buildfunc.__name__ for buildfunc in all_builders)

    for name in requested_builders:
        if name not in builder_names:
            announce('ERROR: unknown builder: %r', name)
            sys.exit(1)

    if not requested_builders:
        remove_directory(stagedir)
    check_call(['/bin/mkdir', '-p', downloaddir, builddir, stagedir,
                installdir])

    with workdir(builddir):
        for buildfunc in all_builders:
            if ((not requested_builders) or
                (buildfunc.__name__ in requested_builders)):
                buildfunc()

    # Remove unwanted build products
    for dirpath in ('bin', 'lib/pkgconfig', 'share'):
        remove_directory(stagedir + '/' + dirpath)
    check_call(['/usr/bin/find', (stagedir + '/lib'), '-name', '*.la',
                '-exec', '/bin/rm', '{}', ';'])

    # Install files
    check_call(['/usr/bin/rsync', '-a', (stagedir + '/'), installdir])


if __name__ == '__main__':
    main()
